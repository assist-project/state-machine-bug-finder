<?xml version="1.0" encoding="UTF-8"?>

<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>

  <groupId>se.uu.it</groupId>
  <artifactId>state-machine-bug-finder</artifactId>
  <version>0.2</version>

  <name>state-machine-bug-finder</name>
  <url>https://github.com/assist-project/state-machine-bug-finder</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>

    <!-- Dependency versions in alphabetical order -->
    <automatalib.version>0.12.1</automatalib.version>
    <checker-qual.version>3.49.4</checker-qual.version>
    <commons.version>3.17.0</commons.version>
    <error-prone.version>2.39.0</error-prone.version>
    <guava.version>33.4.8-jre</guava.version>
    <jaxb-api.version>4.0.2</jaxb-api.version>
    <jaxb-runtime.version>4.0.5</jaxb-runtime.version>
    <jcommander.version>1.82</jcommander.version>
    <junit.version>4.13.2</junit.version>
    <logback.version>1.5.18</logback.version>
    <lombok.version>1.18.38</lombok.version>
    <slf4j.version>2.0.17</slf4j.version>

    <!-- Plugin versions in alphabetical order -->
    <assembly-plugin.version>3.7.1</assembly-plugin.version>
    <clean-plugin.version>3.5.0</clean-plugin.version>
    <compiler-plugin.version>3.14.0</compiler-plugin.version>
    <coveralls-plugin.version>4.3.0</coveralls-plugin.version>
    <dependency-plugin.version>3.8.1</dependency-plugin.version>
    <deploy-plugin.version>3.1.4</deploy-plugin.version>
    <exec-plugin.version>3.5.1</exec-plugin.version>
    <failsafe-plugin.version>3.5.3</failsafe-plugin.version>
    <install-plugin.version>3.1.4</install-plugin.version>
    <jacoco-plugin.version>0.8.13</jacoco-plugin.version>
    <jar-plugin.version>3.4.2</jar-plugin.version>
    <javacc-plugin.version>3.1.1</javacc-plugin.version>
    <project-info-reports-plugin.version>3.9.0</project-info-reports-plugin.version>
    <resources-plugin.version>3.3.1</resources-plugin.version>
    <site-plugin.version>3.21.0</site-plugin.version>
    <spotless-plugin.version>2.44.5</spotless-plugin.version>
    <spotbugs-plugin.version>4.9.3.2</spotbugs-plugin.version>
    <surefire-plugin.version>3.5.3</surefire-plugin.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>${slf4j.version}</version>
    </dependency>

    <dependency>
      <groupId>org.checkerframework</groupId>
      <artifactId>checker-qual</artifactId>
      <version>${checker-qual.version}</version>
    </dependency>

    <!-- jakarta-xml -->
    <dependency>
      <groupId>jakarta.xml.bind</groupId>
      <artifactId>jakarta.xml.bind-api</artifactId>
      <version>${jaxb-api.version}</version>
    </dependency>

    <!-- jaxb implementation -->
    <dependency>
      <groupId>org.glassfish.jaxb</groupId>
      <artifactId>jaxb-runtime</artifactId>
      <version>${jaxb-runtime.version}</version>
      <scope>runtime</scope>
    </dependency>

    <!-- provide an SLF4J implementation -->
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-core</artifactId>
      <version>${logback.version}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>${logback.version}</version>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <version>${commons.version}</version>
      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>net.automatalib</groupId>
      <artifactId>automata-api</artifactId>
      <version>${automatalib.version}</version>
    </dependency>
    <dependency>
      <groupId>net.automatalib</groupId>
      <artifactId>automata-commons-util</artifactId>
      <version>${automatalib.version}</version>
    </dependency>
    <dependency>
      <groupId>net.automatalib</groupId>
      <artifactId>automata-core</artifactId>
      <version>${automatalib.version}</version>
    </dependency>
    <dependency>
      <groupId>net.automatalib</groupId>
      <artifactId>automata-serialization-dot</artifactId>
      <version>${automatalib.version}</version>
    </dependency>
    <dependency>
      <groupId>net.automatalib</groupId>
      <artifactId>automata-util</artifactId>
      <version>${automatalib.version}</version>
    </dependency>

    <dependency>
      <groupId>com.google.code.findbugs</groupId>
      <artifactId>jsr305</artifactId>
      <version>3.0.2</version>
    </dependency>

    <!-- https://mvnrepository.com/artifact/com.google.guava/guava -->
    <dependency>
       <groupId>com.google.guava</groupId>
       <artifactId>guava</artifactId>
       <version>${guava.version}</version>
    </dependency>

    <!-- https://mvnrepository.com/artifact/com.beust/jcommander -->
    <dependency>
      <groupId>com.beust</groupId>
      <artifactId>jcommander</artifactId>
      <version>${jcommander.version}</version>
    </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>${lombok.version}</version>
      <scope>provided</scope>
    </dependency>
  </dependencies>

  <profiles>
    <profile>
      <id>linux</id>
      <activation>
        <os>
          <family>unix</family>
          <name>Linux</name>
        </os>
      </activation>
      <build>
        <plugins>
          <plugin> <!-- Build shared object -->
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>${exec-plugin.version}</version>
            <executions>
              <execution>
                <id>build-linux</id>
                <phase>generate-resources</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <workingDirectory>${project.basedir}/pattern-language</workingDirectory>
                  <executable>make</executable>
                  <arguments>
                    <argument>libstubs.so</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin> <!-- Copy shared object to build directory -->
            <artifactId>maven-resources-plugin</artifactId>
            <version>${resources-plugin.version}</version>
            <executions>
              <execution>
                <id>copy-linux-lib</id>
                <phase>process-resources</phase>
                <goals><goal>copy-resources</goal></goals>
                <configuration>
                  <outputDirectory>${project.build.directory}/classes</outputDirectory>
                  <resources>
                    <resource>
                      <directory>${project.basedir}/pattern-language</directory>
                      <includes>
                        <include>libstubs.so</include>
                      </includes>
                    </resource>
                  </resources>
                  <overwrite>true</overwrite>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>macos</id>
      <activation>
        <os>
          <family>mac</family>
          <name>Mac OS X</name>
        </os>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>${exec-plugin.version}</version>
            <executions>
              <execution>
                <id>build-macos</id>
                <phase>generate-resources</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <workingDirectory>${project.basedir}/pattern-language</workingDirectory>
                  <executable>make</executable>
                  <arguments>
                    <argument>libstubs.dylib</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <artifactId>maven-resources-plugin</artifactId>
            <version>${resources-plugin.version}</version>
            <executions>
              <execution>
                <id>copy-macos-lib</id>
                <phase>process-resources</phase>
                <goals><goal>copy-resources</goal></goals>
                <configuration>
                  <outputDirectory>${project.build.directory}/classes</outputDirectory>
                  <resources>
                    <resource>
                      <directory>${project.basedir}/pattern-language</directory>
                      <includes>
                        <include>libstubs.dylib</include>
                      </includes>
                    </resource>
                  </resources>
                  <overwrite>true</overwrite>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <build>
    <finalName>sm-bug-finder</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven
                           defaults (may be moved to parent pom) -->
      <plugins>
        <!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle -->
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>${clean-plugin.version}</version>
        </plugin>
        <!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>${resources-plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>${compiler-plugin.version}</version>
          <configuration>
            <showWarnings>true</showWarnings>
            <compilerArgs>
              <arg>-Werror</arg>
              <arg>-Xlint:all,-processing</arg>
              <arg>-XDcompilePolicy=simple</arg>
              <arg>--should-stop=ifError=FLOW</arg>
              <arg>-Xplugin:ErrorProne -XepExcludedPaths:.*/target/generated-sources/javacc/.* -XepExcludedPaths:.*se/uu/it/smbugfinder/encoding/javacc/.* -Xep:AddressSelection:OFF -Xep:MissingSummary:OFF </arg>
            </compilerArgs>
            <annotationProcessorPaths>
              <path>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
              </path>
              <path>
                <groupId>com.google.errorprone</groupId>
                <artifactId>error_prone_core</artifactId>
                <version>${error-prone.version}</version>
              </path>
            </annotationProcessorPaths>
            <release>17</release>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>${surefire-plugin.version}</version>
          <configuration>
            <argLine>${surefire.jacoco.args}</argLine>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>${install-plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>${deploy-plugin.version}</version>
        </plugin>
        <!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle -->
        <plugin>
          <artifactId>maven-site-plugin</artifactId>
          <version>${site-plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-project-info-reports-plugin</artifactId>
          <version>${project-info-reports-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.eluder.coveralls</groupId>
          <artifactId>coveralls-maven-plugin</artifactId>
          <version>${coveralls-plugin.version}</version>
          <configuration>
              <jacocoReports>
                  <jacocoReport>${basedir}/distribution/target/site/jacoco-merged-test-coverage-report/jacoco.xml</jacocoReport>
              </jacocoReports>
              <dependencies>
                  <dependency>
                      <groupId>jakarta.xml.bind</groupId>
                      <artifactId>jakarta.xml.bind-api</artifactId>
                  </dependency>
              </dependencies>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>${exec-plugin.version}</version>
        <executions>
          <execution>
            <id>clean-ocaml</id>
            <phase>clean</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>make</executable>
              <workingDirectory>${project.basedir}/pattern-language</workingDirectory>
              <arguments>
                <argument>distclean</argument>
              </arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>${failsafe-plugin.version}</version>
        <configuration>
          <argLine>${failsafe.jacoco.args}</argLine>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>${assembly-plugin.version}</version>
        <configuration>
          <archive>
            <manifest>
              <mainClass>se.uu.it.smbugfinder.Main</mainClass>
            </manifest>
          </archive>
          <descriptorRefs>
            <descriptorRef>jar-with-dependencies</descriptorRef>
          </descriptorRefs>
        </configuration>
        <!-- uncomment in case to make a jar with dependencies on calling 'mvn install' -->
        <!-- <executions> <execution> <id>make-assembly</id> <phase>package</phase>
               <goals> <goal>single</goal> </goals> </execution> </executions> -->
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>javacc-maven-plugin</artifactId>
        <version>${javacc-plugin.version}</version>
        <configuration>
          <sourceDirectory>${basedir}/src/main/java/se/uu/it/smbugfinder/encoding/javacc/</sourceDirectory>
        </configuration>
        <executions>
          <execution>
            <phase>generate-sources</phase>
            <goals>
              <goal>javacc</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Build an executable JAR -->
      <plugin>
        <artifactId>maven-jar-plugin</artifactId>
        <version>${jar-plugin.version}</version>
        <configuration>
          <archive>
            <manifest>
              <addClasspath>true</addClasspath>
              <classpathPrefix>lib/</classpathPrefix>
              <mainClass>se.uu.it.smbugfinder.Main</mainClass>
            </manifest>
          </archive>
        </configuration>
      </plugin>

      <!-- Dependency analysis -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>${dependency-plugin.version}</version>
        <executions>
          <execution>
            <id>analyze</id>
            <goals>
              <goal>analyze-only</goal>
            </goals>
            <configuration>
              <failOnWarning>true</failOnWarning>
              <ignoreUnusedRuntime>true</ignoreUnusedRuntime>
            </configuration>
          </execution>
          <execution>
            <id>copy-dependencies</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/lib</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Format the source code (using spotless) -->
      <plugin>
        <groupId>com.diffplug.spotless</groupId>
        <artifactId>spotless-maven-plugin</artifactId>
        <version>${spotless-plugin.version}</version>
        <configuration>
          <formats>
            <format>
              <includes>
                <include>**/*.md</include>
                <include>**/*.xml</include>
                <include>.spotbugs/*.xml</include>
              </includes>
              <excludes>
                <exclude>_opam/**/*.md</exclude>
                <exclude>target/**/*.xml</exclude>
              </excludes>
              <endWithNewline />
              <indent>
                <spaces>true</spaces>
                <spacesPerTab>4</spacesPerTab>
              </indent>
              <trimTrailingWhitespace />
            </format>
          </formats>
          <java>
            <excludes>
              <exclude>target/generated-sources/javacc/**/*.java</exclude>
            </excludes>
            <importOrder>
              <!-- the empty string is for all imports not specified explicitly, '|' joins groups without blank line -->
              <order>java,jakarta|javax,org,com,net|</order>
            </importOrder>
            <removeUnusedImports />
            <formatAnnotations />
            <endWithNewline />
            <trimTrailingWhitespace />
            <indent>
              <spaces>true</spaces>
              <spacesPerTab>4</spacesPerTab>
            </indent>
          </java>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Static code analysis -->
      <plugin>
        <groupId>com.github.spotbugs</groupId>
        <artifactId>spotbugs-maven-plugin</artifactId>
        <version>${spotbugs-plugin.version}</version>
        <configuration>
          <threshold>Medium</threshold>
          <includeFilterFile>.spotbugs/include.xml</includeFilterFile>
          <excludeFilterFile>.spotbugs/exclude.xml</excludeFilterFile>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Code coverage -->
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>${jacoco-plugin.version}</version>
        <executions>
          <execution>
            <id>before-unit-test-execution</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
            <configuration>
              <destFile>${project.build.directory}/jacoco-output/jacoco-unit-tests.exec</destFile>
              <propertyName>surefire.jacoco.args</propertyName>
            </configuration>
          </execution>
          <execution>
            <id>after-unit-test-execution</id>
            <phase>test</phase>
            <goals>
              <goal>report</goal>
            </goals>
            <configuration>
              <dataFile>${project.build.directory}/jacoco-output/jacoco-unit-tests.exec</dataFile>
              <outputDirectory>${project.reporting.outputDirectory}/jacoco-unit-test-coverage-report</outputDirectory>
            </configuration>
          </execution>
          <execution>
            <id>before-integration-test-execution</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
            <configuration>
              <destFile>${project.build.directory}/jacoco-output/jacoco-integration-tests.exec</destFile>
              <propertyName>failsafe.jacoco.args</propertyName>
            </configuration>
          </execution>
          <execution>
            <id>after-integration-test-execution</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>report</goal>
            </goals>
            <configuration>
              <dataFile>${project.build.directory}/jacoco-output/jacoco-integration-tests.exec</dataFile>
              <outputDirectory>${project.reporting.outputDirectory}/jacoco-integration-test-coverage-report</outputDirectory>
            </configuration>
          </execution>
          <execution>
            <id>merge-unit-and-integration</id>
            <phase>post-integration-test</phase>
              <goals>
                <goal>merge</goal>
              </goals>
              <configuration>
              <fileSets>
                <fileSet>
                  <directory>${project.build.directory}/jacoco-output/</directory>
                  <includes>
                    <include>*.exec</include>
                  </includes>
                </fileSet>
              </fileSets>
              <destFile>${project.build.directory}/jacoco-output/merged.exec</destFile>
            </configuration>
          </execution>
          <execution>
            <id>create-merged-report</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>report</goal>
            </goals>
            <configuration>
              <dataFile>${project.build.directory}/jacoco-output/merged.exec</dataFile>
              <outputDirectory>${project.reporting.outputDirectory}/jacoco-merged-test-coverage-report</outputDirectory>
            </configuration>
          </execution>
          <execution>
            <!-- code coverage checks https://www.eclemma.org/jacoco/trunk/doc/check-mojo.html -->
            <id>jacoco-check</id>
            <phase>verify</phase>
            <goals>
              <goal>check</goal>
            </goals>
            <configuration>
              <rules>
                <rule>
                  <element>BUNDLE</element>
                  <limits>
                    <limit>
                      <counter>LINE</counter>
                      <value>COVEREDRATIO</value>
                      <minimum>0.56</minimum>
                    </limit>
                  </limits>
                </rule>
              </rules>
              <dataFile>${project.build.directory}/jacoco-output/merged.exec</dataFile>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>

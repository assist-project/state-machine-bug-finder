#!/bin/bash
# Script for running groups of bug checking experiments corresponding to certain configurations.

readonly SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
readonly BUGCHECK_DIR="$SCRIPT_DIR/output/ssh"
readonly COLLATOR_SCRIPT="$SCRIPT_DIR/experiments/scripts/collate_results.py"
readonly MAX_DURATION="4h"
readonly MODELS_DIR="$SCRIPT_DIR/src/main/resources/models/ssh"
readonly ARGS_DIR="$SCRIPT_DIR/args"

function displayHelp() {
    echo "Usage: run_bugchecker [Options]"
    echo
    echo "Script to execute multiple bug checking experiments SSH servers, and summarize results."
    echo "Validation can be enabled using options -qv and -v."
    echo
    echo "Options: "
    echo " -qv | --quick-validate    enables validation which checks a single shortest witness"
    echo " -v | --validate           enables validation which checks witnesses generated by a BFS of the intersection DFA, wherein the number of witnesses generated is capped to 100 and the number of times each state is visited to 1"
    echo " -f regex                  if set, the script will only launch experiments whose argument files matches the given regular expression (e.g. using '-f .*dropbear.*' will cause the script to only execute experiments involving Dropbear)"
    echo " -ao | --auto-open         automatically opens (using xdg-open) the resulting CSV file in which the experiment results are summarized"
    #echo " -o dir | --output dir     adjusts to {dir} the output directory containing experiment folders/the result summary"
    echo " -d | --dry                performs a dry run by only printing out the commands to be run without executing them"
#    echo " -t max_time               caps the maximum amount of time for each experiment to {max_time}"
    echo
    echo "Details: "
    echo "For each experiment, the script executes StateMachineBugFinder on selected bug checking argument files taken from the $ARGS_DIR directory."
    echo "Experiment folders and a CSV summary of the results are stored in $BUGCHECK_DIR."
}

filter=""
opt_open=0
opt_dry=0
bugcheck_dir=""
max_time=0

while [[ "$1" =~ ^- ]]; do case $1 in
     #   -o | --output )
     #       shift; bugcheck_dir=$1
     #       ;;
        -qv | --quick-validate )
            global_extra_args="$global_extra_args -validateBugs -generationStrategy SHORTEST"
            ;;
        -v | --validate )
            global_extra_args="$global_extra_args -validateBugs -generationStrategy BFS"
            ;;
        -f | --filter )
            shift; filter=$1
            ;;
        -ao | --auto-open )
            opt_open=1
            ;;
        -d | --dry )
            opt_dry=1
            ;;
        -t )
            shift; max_time=$1
            ;;
        * )
            echo "Unsupported option $1"
            displayHelp
            exit
            ;;
        esac; shift; done


bugcheck_dir=$BUGCHECK_DIR

if [[ -d $bugcheck_dir && $opt_dry -eq 0 ]]; then
    echo "The directory $bugcheck_dir already exists. Delete it and re-run."
    exit
fi

#global_extra_args=$2

function launch() {
    args_file=$1
    sut_name=$2
    app_args=$3
    #jvm_args=$3
    if [[ -z $filter || $args_file =~ $filter ]]; then
        if [[ $max_time -ne 0 ]]; then
            echo timeout $max_time java -jar $SCRIPT_DIR/target/sm-bug-finder.jar $args_file -od $bugcheck_dir/$sut_name $app_args  $global_extra_args
            if [[ $opt_dry -eq 0 ]]; then
                timeout $max_time java -jar $SCRIPT_DIR/target/sm-bug-finder.jar $args_file -od $bugcheck_dir/$sut_name $app_args  $global_extra_args
            fi
        else
            echo java -jar $SCRIPT_DIR/target/sm-bug-finder.jar $args_file $app_args -od $bugcheck_dir/$sut_name $global_extra_args
            if [[ $opt_dry -eq 0 ]]; then
                java -jar $SCRIPT_DIR/target/sm-bug-finder.jar $args_file $app_args -od $bugcheck_dir/$sut_name $global_extra_args
            fi
        fi
    fi
}

function collateResults() {
    summary_file=$1
    python3 $COLLATOR_SCRIPT -o $1 $bugcheck_dir
}

if [[ $opt_dry -eq 0 ]]; then
    echo "Executing bug checking experiments"
else
    echo "Dry run of bug checking experiments"
fi


#launch args/bitvise-7.23
launch args/bitvise-8.49 "BitVise-8.49"
#launch args/dropbear-v2014.65
launch args/dropbear-v2020.81 "Dropbear-v2020.81"
#launch args/openssh-6.9p1
launch args/openssh-8.8p1 "OpenSSH-8.8p1"

if [[ $opt_dry -eq 0 ]]; then
    bugcheck_summary="$bugcheck_dir"/ssh_summary.csv
    collateResults $bugcheck_summary
    if [[ $opt_open -eq 1 ]]; then
        xdg-open $bugcheck_summary
    fi

    echo
    echo "Finished running experiments!"
    echo "Results are stored in $bugcheck_dir, with a summary of experiment results provided in $bugcheck_summary"
fi
